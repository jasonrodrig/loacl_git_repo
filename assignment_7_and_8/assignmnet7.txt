Define a struct Point with two fields x and y of type float. 

 1. Define a function newPoint that returns a new Point with the given x and y coordinates.

 2. Define a function addPoints that adds two points by adding their x and y coordinates separately and returns a new point with the result.

 3. Define the is_inside function that we used in the pi simulation using points.

 4. Define a function that takes an array of points and returns the point with the smallest x value
/////////////////////////////////////////////

#include<stdio.h>
struct point{
	float x;
        float y;	
};

struct point newpoint(float x, float y){
      struct point p;
      p.x = x;
      p.y = y;
      return p;
}

struct point addpoints(struct point p1, struct point p2){
       struct point x;
       struct point y;
       struct point results;
       results.x = p1.x + p2.x;
       results.y = p1.y + p2.y;
       return results;
}

int is_inside(struct point p1){     
      if ( ( p1.x * p1.x + p1.y * p1.y) <= 1 )
	      return 1;
      else
	      return 0;
}

int main()
{ 
	struct point p1[] = {

	         	newpoint( 0.1 , 0.2 ),
			newpoint( 0.4 , 0.5 ),
			newpoint( 0.3 , 0.2 ),
                        newpoint( 0.5 , 0.5 ),
			newpoint( 0.9, 0.9 )	
	};
		        	
	struct point results = addpoints(p1[0],p1[1]);
        // int inside_results = is_inside(p1[0]);
	//int inside_results = is_inside(p1[4]);
        
        printf("points 1 :( %f, %f)\n", p1[0].x , p1[0].y);
        printf("points 2 :( %f, %f)\n", p1[1].x , p1[1].y);
        printf("results :( %f, %f)\n", results.x, results.y);
	
	int inside_results1 = is_inside(p1[0]);
	printf("is_inside_results : %d\n",inside_results1);
	int inside_results2 = is_inside(p1[4]);
        printf("is_inside_results : %d",inside_results2);


        return 0;
}

results:

1) newpoints coordinatess,
points 1 :( 0.100000, 0.200000)
points 2 :( 0.400000, 0.500000)

2)added results of 2 coordinates
results :( 0.500000, 0.700000)

3) results to check if the coordinate lies in circle or not:
case1: it lies inside circle
is_inside_results : 1
case 2: doesn't lie in circle
is_inside_results : 0

/////////////////////////////////////


Define a struct Rectangle with two fields lower_left and upper_right of type Point.

 5. Define a function newRectangle that takes two points and returns a new Rectangle with the given points as lower_left and upper_right corners.

 6. Define a function get_area which takes a rectangle and returns the area of the rectangle.

 7. Define a function is_inside_rect that takes a point and a rectangle and returns true if the point is inside the rectangle.

 8. Define a function that takes an array of rectangles and returns the rectangle with the smallest area.




////////////////////////////////


#include <stdio.h>

struct Point {
    float x;
    float y;
};

struct Rectangle {
    struct Point lower_left;
    struct Point upper_right;
};

struct Rectangle newRectangle(struct Point lower_left, struct Point upper_right) {
    struct Rectangle rect;
    rect.lower_left = lower_left;
    rect.upper_right = upper_right;
    return rect;
}

float get_area(struct Rectangle rect) {
    float width = rect.upper_right.x - rect.lower_left.x;
    float height = rect.upper_right.y - rect.lower_left.y;
    return width * height;
}

float is_inside_rect(struct Point p1 , struct Rectangle rect1){
    if( (p1.x >= rect1.lower_left.x) && (p1.x <= rect1.upper_right.x) &&
                   ( p1.y <= rect1.upper_right.y) && (p1.y >= rect1.lower_left.y))
            return 1;
    else
            return 0;

}
int main() {

    struct Point p1 = {0.0, 0.0}; 
    struct Point p2 = {4.0, 5.0}; 
    struct Point p3 = {1.0, 1.0}; 
    struct Point p4 = {3.0, 3.0}; 
    struct Point p5 = {2.0, 2.0}; 
    struct Point p6 = {6.0, 6.0};

    struct Rectangle rect1 = newRectangle(p1, p2); 
    struct Rectangle rect2 = newRectangle(p3, p4); 

   // struct Rectangle Area = get_area(rect1);
    printf("Rectangle 1:\n");
    printf("Lower Left: (%f, %f)\n", rect1.lower_left.x, rect1.lower_left.y);
    printf("Upper Right: (%f, %f)\n", rect1.upper_right.x, rect1.upper_right.y);

    printf("Rectangle 2:\n");
    printf("Lower Left: (%f, %f)\n", rect2.lower_left.x, rect2.lower_left.y);
    printf("Upper Right: (%f, %f)\n", rect2.upper_right.x, rect2.upper_right.y);
      
    printf("Area: %f\n", get_area(rect1));
    printf("Area: %f\n", get_area(rect2));
    printf("is_inside_rect = %f",is_inside_rect(p5, rect1));
    printf("is_inside_rect = %f",is_inside_rect(p6, rect1));

    return 0;
}

results:
1) rectangle coordinates
Rectangle 1:
Lower Left: (0.000000, 0.000000)
Upper Right: (4.000000, 5.000000)
Rectangle 2:
Lower Left: (1.000000, 1.000000)
Upper Right: (3.000000, 3.000000)

2)area of rectangle 1 and 2
Area: 20.000000
Area: 4.000000

3)coordinate is inside the rect or not
case1: is inside

is_inside_rect = 1.000000
case 2: not inside
is_inside_rect = 0.000000
